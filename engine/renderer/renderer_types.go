package renderer

import "github.com/spaghettifunk/anima/engine/math"

/**
 * @brief A structure which is generated by the application and sent once
 * to the renderer to render a given frame. Consists of any data required,
 * such as delta time and a collection of views to be rendered.
 */
type RenderPacket struct {
	DeltaTime float64
	/** The number of views to be rendered. */
	ViewCount uint16
	/** An array of views to be rendered. */
	views []RenderViewPacket
}

/** @brief Known render view types, which have logic associated with them. */
type RenderViewKnownType int

const (
	/** @brief A view which only renders objects with *no* transparency. */
	RENDERER_VIEW_KNOWN_TYPE_WORLD RenderViewKnownType = 0x01
	/** @brief A view which only renders ui objects. */
	RENDERER_VIEW_KNOWN_TYPE_UI RenderViewKnownType = 0x02
	/** @brief A view which only renders skybox objects. */
	RENDERER_VIEW_KNOWN_TYPE_SKYBOX RenderViewKnownType = 0x03
)

/** @brief Known view matrix sources. */
type RenderViewViewMatrixSource int

const (
	RENDER_VIEW_VIEW_MATRIX_SOURCE_SCENE_CAMERA RenderViewViewMatrixSource = 0x01
	RENDER_VIEW_VIEW_MATRIX_SOURCE_UI_CAMERA    RenderViewViewMatrixSource = 0x02
	RENDER_VIEW_VIEW_MATRIX_SOURCE_LIGHT_CAMERA RenderViewViewMatrixSource = 0x03
)

/** @brief Known projection matrix sources. */
type RenderViewProjectionMatrixSource int

const (
	RENDER_VIEW_PROJECTION_MATRIX_SOURCE_DEFAULT_PERSPECTIVE  RenderViewProjectionMatrixSource = 0x01
	RENDER_VIEW_PROJECTION_MATRIX_SOURCE_DEFAULT_ORTHOGRAPHIC RenderViewProjectionMatrixSource = 0x02
)

/** @brief configuration for a renderpass to be associated with a view */
type RenderViewPassConfig struct {
	Name string
}

/**
 * @brief The configuration of a render view.
 * Used as a serialization target.
 */
type RenderViewConfig struct {
	/** @brief The name of the view. */
	name string
	/**
	 * @brief The name of a custom shader to be used
	 * instead of the view's default. Must be 0 if
	 * not used.
	 */
	CustomShaderName string
	/** @brief The Width of the view. Set to 0 for 100% Width. */
	Width uint16
	/** @brief The Height of the view. Set to 0 for 100% Height. */
	Height uint16
	/** @brief The known type of the view. Used to associate with view logic. */
	RenderViewType RenderViewKnownType
	/** @brief The source of the view matrix. */
	ViewMatrixSource RenderViewViewMatrixSource
	/** @brief The source of the projection matrix. */
	ProjectionMatrixSource RenderViewProjectionMatrixSource
	/** @brief The number of renderpasses used in this view. */
	PassCount uint8
	/** @brief The configuration of renderpasses used in this view. */
	Passes []RenderViewPassConfig
}

/**
 * @brief A render view instance, responsible for the generation
 * of view packets based on internal logic and given config.
 */
type RenderView struct {
	/** @brief The unique identifier of this view. */
	ID uint16
	/** @brief The Name of the view. */
	Name string
	/** @brief The current Width of this view. */
	Width uint16
	/** @brief The current Height of this view. */
	Height uint16
	/** @brief The known type of this view. */
	RenderViewType RenderViewKnownType

	/** @brief The number of renderpasses used by this view. */
	RenderpassCount uint8
	/** @brief An array of pointers to renderpasses used by this view. */
	Passes []*RenderPass

	/** @brief The name of the custom shader used by this view, if there is one. */
	CustomShaderName string
	/** @brief The internal, view-specific data for this view. */
	InternalData interface{}
}

type RenderViewInterface interface {
	/**
	 * @brief A pointer to a function to be called when this view is created.
	 *
	 * @param self A pointer to the view being created.
	 * @return True on success; otherwise false.
	 */
	OnCreate() bool
	/**
	 * @brief A pointer to a function to be called when this view is destroyed.
	 *
	 * @param self A pointer to the view being destroyed.
	 */
	OnDestroy() error

	/**
	 * @brief A pointer to a function to be called when the owner of this view (such
	 * as the window) is resized.
	 *
	 * @param self A pointer to the view being resized.
	 * @param width The new width in pixels.
	 * @param width The new height in pixels.
	 */
	OnResize(width, height uint32)

	/**
	 * @brief Builds a render view packet using the provided view and meshes.
	 *
	 * @param self A pointer to the view to use.
	 * @param data Freeform data used to build the packet.
	 * @param out_packet A pointer to hold the generated packet.
	 * @return True on success; otherwise false.
	 */
	OnBuildPacket(data interface{}) (*RenderViewPacket, error)

	/**
	 * @brief Destroys the provided render view packet.
	 * @param self A pointer to the view to use.
	 * @param packet A pointer to the packet to be destroyed.
	 */
	OnDestroyPacket(packet *RenderViewPacket)

	/**
	 * @brief Uses the given view and packet to render the contents therein.
	 *
	 * @param self A pointer to the view to use.
	 * @param packet A pointer to the packet whose data is to be rendered.
	 * @param frame_number The current renderer frame number, typically used for data synchronization.
	 * @param render_target_index The current render target index for renderers that use multiple render targets at once (i.e. Vulkan).
	 * @return True on success; otherwise false.
	 */
	OnRender(packet *RenderViewPacket, frame_number, render_target_index uint64) bool
}

/**
 * @brief A packet for and generated by a render view, which contains
 * data about what is to be rendered.
 */
type RenderViewPacket struct {
	/** @brief A constant pointer to the View this packet is associated with. */
	View *RenderView
	/** @brief The current view matrix. */
	ViewMatrix math.Mat4
	/** @brief The current projection matrix. */
	ProjectionMatrix math.Mat4
	/** @brief The current view position, if applicable. */
	ViewPosition math.Vec3
	/** @brief The current scene ambient colour, if applicable. */
	AmbientColour math.Vec4
	/** @brief The number of geometries to be drawn. */
	GeometryCount uint32
	/** @brief The Geometries to be drawn. */
	Geometries *GeometryRenderData
	/** @brief The name of the custom shader to use, if applicable. Otherwise 0. */
	CustomShadername string
	/** @brief Holds a pointer to freeform data, typically understood both by the object and consuming view. */
	ExtendedData interface{}
}

type MeshPacketData struct {
	MeshCount uint32
	Meshes    []*Mesh
}

type UIPacketData struct {
	MeshData *MeshPacketData
	// TODO: temp
	TextCount uint32
	Texts     []*UIText
}

type skybox_packet_data struct {
	Skybox *Skybox
}
